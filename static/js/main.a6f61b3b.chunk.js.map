{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","features/Login/LoginReducer.ts","app/App-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authApi","data","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isError","isInitialized","appSetStatus","setAppError","error","changeEntityStatus","todoId","changeTaskEntityStatus","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","entityStatus","Delete","Todolist","demo","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","login","removeTaskAC","removeTaskTC","resultCode","item","messages","catch","err","message","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","isInitialize","finally","initialized","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6f61b3b.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from \"../app/App-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ef800069-c5f3-467c-9f0b-02d4de59b8ee'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// types\r\n\r\n\r\n\r\n\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from 'redux'\r\nimport {appSetStatus, AppSetStatusType, SetAppErrorType} from \"../../app/App-reducer\";\r\nimport {authApi, LoginParamsType} from \"../../api/todolists-api\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n     dispatch(appSetStatus('loading'))\r\n    authApi.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(appSetStatus('idle'))\r\n            }\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(appSetStatus('loading'))\r\n    authApi.logout()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(appSetStatus('succeeded'))\r\n            }\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppSetStatusType | SetAppErrorType\r\n","//\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"../features/Login/LoginReducer\";\r\nimport {authApi} from \"../api/todolists-api\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    isError: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.initialized}\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, isError: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsInitialized = (initialized: boolean) => ({type: 'SET-IS-INITIALIZED', initialized} as const)\r\n\r\nexport const appSetStatus = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch) => {\r\n    authApi.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            }\r\n        })\r\n        .finally(() => {\r\n                dispatch(setIsInitialized(true))\r\n            }\r\n        )\r\n}\r\n\r\nexport const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport type SetIsInitializedType = ReturnType<typeof setIsInitialized>\r\nexport type SetAppErrorType = ReturnType<typeof setAppError>\r\nexport type AppSetStatusType = ReturnType<typeof appSetStatus>\r\ntype ActionsType = AppSetStatusType | SetAppErrorType | SetIsInitializedType","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {appSetStatus, AppSetStatusType, RequestStatusType, setAppError, SetAppErrorType} from \"../../app/App-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'TODOLIST/CHANGE-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todoId? {...tl, entityStatus: action.status}: tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const changeEntityStatus = (todoId: string,status: RequestStatusType) => ({type: 'TODOLIST/CHANGE-ENTITY-STATUS',todoId, status} as const)\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(appSetStatus('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(appSetStatus('idle'))\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(appSetStatus('loading'))\r\n        dispatch(changeEntityStatus(todolistId,'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(changeEntityStatus(todolistId,'idle'))\r\n                    dispatch(appSetStatus('idle'))\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                } else {\r\n                    dispatch(setAppError(res.data.messages[0]))\r\n                    dispatch(appSetStatus('failed'))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(appSetStatus('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(appSetStatus('idle'))\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                } else {\r\n                    dispatch(setAppError(res.data.messages[0]))\r\n                    dispatch(appSetStatus('failed'))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(appSetStatus('loading'))\r\n        dispatch(changeEntityStatus(id,'loading'))\r\n\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeEntityStatus(id,'idle'))\r\n                dispatch(appSetStatus('idle'))\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeEntityStatusType = ReturnType<typeof changeEntityStatus>\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | AppSetStatusType\r\n    | SetAppErrorType\r\n    | ChangeEntityStatusType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {appSetStatus, AppSetStatusType, RequestStatusType, setAppError, SetAppErrorType} from \"../../app/App-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'TASK/CHANGE-ENTITY-STATUS':\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t=>t.id ===action.taskId? {...t, entityStatus: action.status}: t )}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\nexport const changeTaskEntityStatus = (taskId: string, todolistId: string, status: RequestStatusType) => ({\r\n    type: 'TASK/CHANGE-ENTITY-STATUS',\r\n    taskId,\r\n    todolistId,\r\n    status\r\n} as const)\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(appSetStatus('idle'))\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(appSetStatus('loading'))\r\n    dispatch(changeTaskEntityStatus(taskId, todolistId, 'loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(changeTaskEntityStatus(taskId, todolistId, 'idle'))\r\n            dispatch(appSetStatus('idle'))\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(appSetStatus('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(appSetStatus('idle'))\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            } else {\r\n                dispatch(setAppError(res.data.messages[0]))\r\n                dispatch(appSetStatus('failed'))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppError(err.message))\r\n            dispatch(appSetStatus('failed'))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(appSetStatus('loading'))\r\n        dispatch(changeTaskEntityStatus(taskId, todolistId, 'loading'))\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                dispatch(changeTaskEntityStatus(taskId, todolistId, 'idle'))\r\n                dispatch(appSetStatus('idle'))\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | AppSetStatusType\r\n    | SetAppErrorType\r\n    | ReturnType<typeof changeTaskEntityStatus>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType} from \"../../app/App-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled === 'loading'}\r\n        />\r\n        <IconButton disabled={props.disabled=== 'loading'} color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {RequestStatusType} from \"../../app/App-reducer\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n       props.disabled? setEditMode(false): setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n   // props.disabled && setEditMode(false)\r\n    return  editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {RequestStatusType} from \"../../../../app/App-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan disabled={props.entityStatus==='loading'} value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton disabled={props.entityStatus==='loading'} onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/App-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan disabled={props.entityStatus === 'loading'} value={props.title}\r\n                          onChange={changeTodolistTitle}/>\r\n            <IconButton disabled={props.entityStatus === 'loading'} onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm disabled={props.entityStatus} addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                entityStatus={t.entityStatus}\r\n                    //entityStatus={props.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo && !isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                entityStatus={tl.entityStatus}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {isError} from \"util\";\r\nimport {setAppError} from \"../../app/App-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n   // const [open, setOpen] = useState(true);\r\n    const dispatch = useDispatch()\r\n    let error = useSelector<AppRootStateType, string | null>(state => state.app.isError)\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error!== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}😠\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikErrors, useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./LoginReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more'\r\n            }\r\n            return errors;\r\n\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit} action=\"\">\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeApp, RequestStatusType} from \"./App-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/LoginReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialize = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    if (!isInitialize) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n\r\n    }\r\n\r\n    const onLogoutHandler = () => {\r\n        debugger\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n\r\n                    {isLoggedIn && <Button onClick={onLogoutHandler} color=\"inherit\">Login out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='login' element={<Login/>}/>\r\n                    <Route path='404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./App-reducer\";\r\nimport {loginReducer} from \"../features/Login/LoginReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    login: loginReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}